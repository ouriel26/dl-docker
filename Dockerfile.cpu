ARG UBUNTU_VERSION=16.04

FROM ubuntu:${UBUNTU_VERSION} AS base

MAINTAINER Uriel Berdugo <uriel.berdugo@gmail.com>

RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        git \
        libcurl3-dev \
        libfreetype6-dev \
        libhdf5-serial-dev \
        libzmq3-dev \
        pkg-config \
        rsync \
				cmake \
        software-properties-common \
        unzip \
        zip \
        zlib1g-dev \
        openjdk-8-jdk \
        openjdk-8-jre-headless \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV CI_BUILD_PYTHON python

# CACHE_STOP is used to rerun future commands, otherwise cloning tensorflow will be cached and will not pull the most recent version
ARG CACHE_STOP=1
# Check out TensorFlow source code if --build-arg CHECKOUT_TF_SRC=1
ARG CHECKOUT_TF_SRC=0
RUN test "${CHECKOUT_TF_SRC}" -eq 1 && git clone https://github.com/tensorflow/tensorflow.git /tensorflow_src || true

ARG USE_PYTHON_3_NOT_2=1
ARG _PY_SUFFIX=${USE_PYTHON_3_NOT_2:+3}
ARG PYTHON=python${_PY_SUFFIX}
ARG PIP=pip${_PY_SUFFIX}

# See http://bugs.python.org/issue19846
ENV LANG C.UTF-8

RUN apt-get update && apt-get install -y \
    ${PYTHON} \
    ${PYTHON}-pip

RUN ${PIP} --no-cache-dir install --upgrade \
    pip \
    setuptools

# Some TF tools expect a "python" binary
RUN ln -s $(which ${PYTHON}) /usr/local/bin/python

RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    wget \
    openjdk-8-jdk \
    ${PYTHON}-dev \
    swig \
		sudo

RUN ${PIP} --no-cache-dir install \
    Pillow \
    h5py \
    keras_applications \
    keras_preprocessing \
    matplotlib \
    mock \
    numpy \
    scipy \
    sklearn \
    pandas \
    && test "${USE_PYTHON_3_NOT_2}" -eq 1 && true || ${PIP} --no-cache-dir install \
    enum34

# Install bazel
ARG BAZEL_VERSION=0.19.2
RUN mkdir /bazel && \
    wget --no-check-certificate -O  /bazel/installer.sh "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh" && \
    wget --no-check-certificate -O /bazel/LICENSE.txt "https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE" && \
    chmod +x /bazel/installer.sh && \
    /bazel/installer.sh && \
    rm -f /bazel/installer.sh

# COPY bashrc /etc/bash.bashrc
# RUN chmod a+rwx /etc/bash.bashrc

ARG ATARI_VERSION=0.1.7
ARG GYM_VERSION=0.12.0
ARG OPENCV_VERSION=4.0.0.21
#ARG KERAS_VERSION=1.2.0
ARG LASAGNE_VERSION=v0.1
ARG TORCH_VERSION=1.0
ARG TORCHVISION_VERSION=0.2.2
#ARG CAFFE_VERSION=master
ARG MIOPEN_VERSION=1.7.1
ARG TENSORBOARDTORCH_VERSION=1.2

# Options:
#   tensorflow
#   tensorflow-gpu
#   tf-nightly
#   tf-nightly-gpu
# Set --build-arg TF_PACKAGE_VERSION=1.11.0rc0 to install a specific version.
# Installs the latest version by default.
ARG TF_PACKAGE=tensorflow
ARG TF_PACKAGE_VERSION=1.12
RUN ${PIP} install ${TF_PACKAGE}${TF_PACKAGE_VERSION:+==${TF_PACKAGE_VERSION}}

RUN ${PIP} install jupyter matplotlib
RUN ${PIP} install jupyter_http_over_ws

#RUN jupyter serverextension enable --py jupyter_http_over_ws

RUN mkdir -p /ai/tensorflow-tutorials && chmod -R a+rwx /ai/
RUN mkdir /.local && chmod a+rwx /.local
RUN apt-get install -y --no-install-recommends wget
WORKDIR /ai/tensorflow-tutorials
RUN wget --no-check-certificate https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/basic_classification.ipynb
RUN wget --no-check-certificate https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/keras/basic_text_classification.ipynb
#COPY readme-for-jupyter.md README.md
RUN apt-get autoremove -y && apt-get remove -y wget


# # Install dependencies for Caffe
# RUN apt-get update && apt-get install -y \
# 		libboost-all-dev \
# 		libgflags-dev \
# 		libgoogle-glog-dev \
# 		libhdf5-serial-dev \
# 		libleveldb-dev \
# 		liblmdb-dev \
# 		libopencv-dev \
# 		libprotobuf-dev \
# 		libsnappy-dev \
# 		protobuf-compiler \
# 		&& \
# 	apt-get clean && \
# 	apt-get autoremove && \
# 	rm -rf /var/lib/apt/lists/*
#
# # Install Caffe
# RUN git clone -b ${CAFFE_VERSION} --depth 1 https://github.com/BVLC/caffe.git /root/caffe && \
# 	cd /root/caffe && \
# 	cat python/requirements.txt | xargs -n1 pip install && \
# 	mkdir build && cd build && \
# 	cmake -DCPU_ONLY=1 -DBLAS=Open .. && \
# 	make -j"$(nproc)" all && \
# 	make install

# Set up Caffe environment variables
# ENV CAFFE_ROOT=/root/caffe
# ENV PYCAFFE_ROOT=$CAFFE_ROOT/python
# ENV PYTHONPATH=$PYCAFFE_ROOT:$PYTHONPATH \
# 	PATH=$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH
#
# RUN echo "$CAFFE_ROOT/build/lib" >> /etc/ld.so.conf.d/caffe.conf && ldconfig


# Install Theano and set up Theano config (.theanorc) OpenBLAS
# RUN pip --no-cache-dir install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} && \
# 	\
# 	echo "[global]\ndevice=cpu\nfloatX=float32\nmode=FAST_RUN \
# 		\n[lib]\ncnmem=0.95 \
# 		\n[nvcc]\nfastmath=True \
# 		\n[blas]\nldflag = -L/usr/lib/openblas-base -lopenblas \
# 		\n[DebugMode]\ncheck_finite=1" \
# 	> /root/.theanorc


# Install Keras
#RUN pip --no-cache-dir install git+git://github.com/fchollet/keras.git@${KERAS_VERSION}


# Install Lasagne
# RUN pip --no-cache-dir install git+git://github.com/Lasagne/Lasagne.git@${LASAGNE_VERSION}

# Install Atari
RUN pip --no-cache-dir install git+git://github.com/openai/atari-py.git@${ATARI_VERSION}

#Install Gym
RUN pip --no-cache-dir install git+git://github.com/openai/gym.git@${GYM_VERSION}

#Install OpenCV
RUN pip --no-cache-dir install ptan

# Install Torch
RUN git clone https://github.com/torch/distro.git /root/torch --recursive && \
	cd /root/torch && \
	bash install-deps && \
	./install.sh

ARG TORCHVISION_VERSION=v0.2.2
RUN pip --no-cache-dir install git+git://github.com/pytorch/vision.git@${TORCHVISION_VERSION}
ARG TENSORBOARDTORCH_VERSION=v1.2
RUN pip --no-cache-dir install git+git://github.com/lanpa/tensorboardX.git@${TENSORBOARDTORCH_VERSION}

# Export the LUA evironment variables manually
ENV LUA_PATH='/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua' \
	LUA_CPATH='/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so' \
	PATH=/root/torch/install/bin:$PATH \
	LD_LIBRARY_PATH=/root/torch/install/lib:$LD_LIBRARY_PATH \
	DYLD_LIBRARY_PATH=/root/torch/install/lib:$DYLD_LIBRARY_PATH
ENV LUA_CPATH='/root/torch/install/lib/?.so;'$LUA_CPATH


# Install the latest versions of nn, and iTorch
RUN apt-get update && apt-get install -y \
		libprotobuf-dev \
		protobuf-compiler \
		libssl-dev


RUN luarocks install nn && \
    luarocks install loadcaffe && \
	\
	cd /root && git clone https://github.com/facebook/iTorch.git && \
	cd iTorch && \
	luarocks make

# Install OpenCV
RUN git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv && \
	cd /root/opencv && \
	mkdir build && \
	cd build && \
	cmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON .. && \
	make -j"$(nproc)"  && \
	make install && \
	ldconfig && \
	echo 'ln /dev/null /dev/raw1394' >> ~/.bashrc

# Expose Ports for TensorBoard (6006), Ipython (8888)

WORKDIR /ai
EXPOSE 6006 8888

RUN ${PYTHON} -m ipykernel.kernelspec

CMD ["bash", "-c", "source /etc/bash.bashrc && jupyter notebook --notebook-dir=/ai --ip 0.0.0.0 --no-browser --allow-root"]
